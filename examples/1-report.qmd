---
title: "The Data Science Pipeline"
author: "EPFL Extension School"
subtitle: An illustration of the Data Science Pipeline with R and Rmarkdown
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

```{r packages, include=FALSE}

# {tidyverse} packages:

# {dplyr} and {tidyr} to clean and tidy data
library(tidyverse)

# {ggplot2} to visualise data
library(ggplot2)

# specialised packages:

library(lubridate) # time manipulation
library(tsibble)
library(tidyquant)
library(purrr)
library(gt)
library(knitr)
```

In this lesson we will explore how to carry the steps of the Data Science pipeline to produce an analysis

![](img/fig-data-pipeline-empty.png)

To illustrate, we will study the stocks of **five tech companies**

-   First we'll focus on a single company

-   Then we'll see how all these companies have fared over time.

# Importing the data

-   We've imported the data using the package `{tidyquant}`.

```{r data-importation}

get_what <- "stock.prices"
companies <- c("AAPL",
             "MSFT",
             "GOOG",
             "AMZN",
             "TSLA")

stocks_data <- 
  companies |> 
  map(tq_get, get = get_what) |> 
  bind_rows()
```

-   The dataset contains the information on stocks for 6 companies: Apple Inc. **(AAPL)**, Microsoft Corporation **(MSFT)** , Alphabet Inc. **(GOOG)**, Amazon Inc. **(AMZN)** and Tesla Inc. **(TSLA).**

```{r}
#| label: tbl-data
#| tbl-cap: "The first six lines of the whole dataset"

stocks_data |> 
  slice_head(n=6) |> 
  kable()
```

# Tidying the data

::: panel-tabset
## Choosing a Company

-   A ticker can be stored in the variable `company_ticker`.

-   Later, this will help us *parametrise* our report

```{r}
company_ticker <- "AAPL"
```

## Choosing a Timeframe

-   To narrow our focus, we restrain our analysis to a given timeframe.

-   We will focus on the performance of these stocks since the beginning of the COVID-19 pandemic (March 11 2020) until now.

-   The `start_date` variable can store this information.

```{r}
start_date <-  ymd("2020-03-11")
```

## Filtering the data

-   We're interested in the company APPLE INC, we can use the ticker `r company_ticker`

-   We'll use the `filter()` to subset the data for the company in the given timeframe.

```{r}
company_data <- 
  stocks_data |> 
  filter(symbol == company_ticker, 
         date > start_date) 
```

-   We can explore the data by printing its first 6 lines:

```{r}
#| label: tbl-clean-data
#| tbl-cap: "The first six lines of the apple dataset"

head(company_data) |> 
  kable()
```
:::

# Understanding the data

## Visualise

-   With this data and the functions in `ggplot()`, we can create a first visualisation of the closing stock price (`close`).

-   We set the dates on the `x` axis and the `close` price in the `y` axis.

```{r}
company_data |> 
  ggplot(aes(x = date))+
  geom_line(aes(y = close)) 
```

## Transform

-   The visualisation offers a first glance. We can transform again to ask the questions on the returns.

-   Remember that the difference in log-price are approximations of the returns, i.e. the **percentage gain after selling the stock**.

::: {#def-log-returns}
Let $p_t$ denote the closing price of the stock, the log-return $r_t$ can be defined as: $$
r_t = \log(p_t) - \log(p_t) \approx \frac{p_t - p_{t-1}}{p_t}
$$ {#eq-return-definition}
:::

-   We use the function `mutate()`, alongside `lag()` to create a column with the daily (log) returns and the definition in equation @def-log-returns

```{r}
company_data <- company_data |> 
  mutate(daily_log_returns = log(close)-log(lag(close)))
```

## Visualize again: log-returns

We can construct a visualisation with this. Additionally, we can add layers to our visualisation to decorate it at will.

```{r}
#| label: fig-log-returns-aapl
#| fig-cap: "Log-returns for AAPL"

company_data |> 
  ggplot(aes(x = date))+
  geom_line(aes(y = daily_log_returns), alpha = 0.5, color = "#555555") +
  geom_hline(yintercept = 0, lty = 3)+
  labs(
    title = str_glue("Daily Returns of the stock for {company_ticker}"), 
    subtitle = str_glue("Close stock prices since {start_date |> format('%d %B, %Y')}"),
    x = "Date",
    y = "Returns"
    ) + 
  theme_minimal()
```

::: callout-important
## Look at the years!

What can you say about this plot?

-   It appears that there is a high **variability** of the log-returns in the year 2020

-   This increase in **variance** seems to stabilise in 2021 and **reappear** in 2022

-   The year 2023 is also quite stable

All these point to signs of increased **variability** in times of **global crises**, which have added elements of uncertainty to the global supply chain.
:::

## Model: Create summary statistics

-   We can obtain a summary table for some summary statistics with `summarise()`.

-   We will compute the average return $\bar{r}$ and estimate the standard deviation (SD) of the log-returns $\hat{\sigma}$

::: {#def-summary-statistics}
These statistics are defined as follows:

```{=tex}
\begin{align}
  \bar{r} &= \frac{1}{T}\sum_{t=1}^T r_t\\
  \hat{\sigma}  &= \sqrt{\frac{1}{T-1}\sum_{t=1}^T \left(r_t - \bar{r}\right)^2}
\end{align}
```
:::

::: callout-caution
## A word of warning

While the average return might not mean much in theoretical terms, the standard deviation might give some idea of the *risk* or *volatility*.
:::

-   We can show the values in the following <mark>table</mark>:

```{r}
#| label: tbl-summary-aapl
#| tbl-cap: "Summary statistics of the log-returns for AAPL"

company_data |> 
  summarise(`Average Return` = mean(daily_log_returns, na.rm = TRUE), 
            `Average Risk (SD)` = sd(daily_log_returns, na.rm = TRUE)) |> 
  gt() |> 
  tab_header(
    title= "Summary statistics of Tech companies stocks",
    subtitle  = str_glue("From {start_date |> format('%d %b, %Y')} to {Sys.Date() |> format('%d %b, %Y')}")) |> 
  fmt_number(decimals  = 4)
```

### Summary statistics by year

And, seeing that the visualisation shows periods of high volatility in the year 2020, we can compute yearly measures of risk and volatility:

```{r}
company_data |> 
  mutate(year = year(date)) |> 
  group_by(year) |> 
  summarise(`Average Return` = mean(daily_log_returns, na.rm = TRUE), 
            `Risk (SD)` = sd(daily_log_returns, na.rm = TRUE)) |> 
  gt() |> 
  tab_header(
    title= "Summary statistics of Tech companies stocks",
    subtitle  = str_glue("From {start_date |> format('%d %b, %Y')} to {Sys.Date() |> format('%d %b, %Y')}")) |> 
  fmt_number(columns = -year, decimals  = 4) |> 
  tab_style(
    style = list(
      cell_fill(color = "lightgreen"), 
      cell_text(color = "white")), 
    locations = 
      cells_body(columns = `Average Return`, 
                 rows= `Average Return` >0)
  ) |> 
  tab_style(
    style = list(
      cell_fill(color = "red"), 
      cell_text(color = "white")), 
    locations = 
      cells_body(columns = `Risk (SD)`, 
                 rows= `Risk (SD)` >0.020)
  )
  

```

::: callout-important
## Look at the years (again)!

We're highlighting the years where the risk is higher. These numbers reflect the remarks we've made in the previous points, namely that global uncertainties have affected the risk of this stock.
:::

# Analyzing multiple companies

-   Now we'll carry the same analysis for multiple companies

-   We import the data and prepare it for analysis

```{r, include=FALSE}
company_tickers <- c(
  "AAPL", "MSFT", "GOOG", "AMZN", "TSLA") 
company_names <- c(
  "Apple", "Microsoft", "Alphabet (Google)", "Amazon", "Tesla")
company_colors <-  c("AAPL" = "#555555", 
             "MSFT" = "#7FBA00", 
             "GOOG" ="#4285F4" , 
             "AMZN" = "#FF9900",
             "TSLA" = "#cc0000"
             )
```

```{r}
returns_data <- 
  stocks_data |> 
  filter(date > start_date) |> 
  select(symbol,date, close) |> 
  group_by(symbol) |> 
  mutate(daily_log_returns = log(close) - log(lag(close))) |> 
  ungroup()

```

## Plotting the stock price

-   Let's plot the whole

```{r}
#| label: fig-all-stocks
#| fig-cap: "Stocks prices for all companies in the selected period"

returns_data |> 
  ggplot(aes(x = date, y = close,  group = symbol, color = symbol))+
  geom_line(alpha=0.5)+
  labs(
    title = str_glue("Daily price for {glue::glue_collapse(company_tickers, sep = ', ')}"), 
    subtitle = str_glue("Close stock prices since {start_date |> format('%d %B, %Y')}"),
    x = "Date",
    y = "Close Price"
    ) + 
  theme_minimal()+
  scale_color_manual(values = company_colors)
```

-   A single chart is not very satisfactory, even if we try to make differentiate companies with colors.

## Visualising the log-returns

-   As the interest is in the `log`-returns, let's plot the returns in a single frame

```{r}
#| label: fig-log-returns-all-stocks
#| fig-cap: "Log returns of all companies"
returns_data |> 
  ggplot(aes(x = date, y = daily_log_returns,  group = symbol, color = symbol))+
  geom_line(alpha = 0.5) +
  labs(
    title = str_glue("Daily Returns of the stock for all companies"), 
    subtitle = str_glue("Close stock prices since {start_date |> format('%d %B, %Y')}"),
    x = "Date",
    y = "Returns"
    ) + 
  theme_minimal()+
  theme(legend.position = "none")+ 
  scale_color_manual(values = company_colors)
```

::: callout-important
## Create a faceted chart

-   There's a problem here, as you can see. The log-returns are confounded and become difficult to distinguish in spite of the use of relevant colors!
:::

## Creating a faceted chart

-   To distinguish better, we can use the function `facet_wrap()` .

-   This creates a \_mini\_ plot according to a variable

```{r}
#| label: fig-log-returns-all-stocks-faceted
#| fig-cap: "Log returns of all companies - faceted"
returns_data |> 
  ggplot(aes(x = date, y = daily_log_returns,  group = symbol, color = symbol))+
  geom_line(alpha = 0.5) +
  labs(
    title = str_glue("Daily Returns of the stock for all companies"), 
    subtitle = str_glue("Close stock prices since {start_date |> format('%d %B, %Y')}"),
    x = "Date",
    y = "Returns"
    ) + 
  theme_minimal()+
  facet_grid(rows = vars(symbol)) + # <1> 
  theme(legend.position = "none")+ 
  scale_color_manual(values = company_colors)
```

1.  On this line we added the faceted chart

::: {.callout-important collapse="true"}
## What can we see?

-   Uncertainties in the supply chains produced by the international crises seem to have affected companies in the same way

-   However the magnitude of these impacts seems to have been different across companies, e.g.

    -   TSLA shows significantly more risk
:::

## Average Returns for all companies

```{r}
#| label: tbl-average-returns-all-companies
#| tbl-cap: "Average Returns for all companies" 
mean_and_sd <- 
  returns_data |> 
  mutate(year = year(date)) |> 
  group_by(symbol, year) |> 
  summarise(
    average_return = mean(daily_log_returns, na.rm = TRUE), 
    sd_return = sd(daily_log_returns, na.rm = TRUE)
    ) |> 
  ungroup()

mean_and_sd |> 
  select(-sd_return) |> 
  pivot_wider(names_from = year,values_from = average_return) |> 
  gt() |> 
  tab_header(
    title= "Average Yearly returns of Tech companies",
    subtitle  = str_glue("From {start_date |> format('%d %b, %Y')} to {Sys.Date() |> format('%d %b, %Y')}")) |> 
  fmt_number(columns = -symbol, decimals  = 4) |> 
  tab_style(
    style = list(
      cell_fill(color = "lightgreen"), 
      cell_text(color = "white")), 
    locations = list(
      cells_body(columns =`2020`, 
                 rows= `2020`>0 ), 
      cells_body(columns =`2021`, 
                 rows= `2021`>0 ), 
       cells_body(columns =`2022`, 
                 rows= `2022`>0 ), 
       cells_body(columns =`2022`, 
                 rows= `2022`>0 ), 
       cells_body(columns =`2023`, 
                 rows= `2023`>0 ), 
      cells_body(columns =`2024`, 
                 rows= `2024`>0 )
    )
  ) |> 
  tab_style(
    style = list(
      cell_fill(color = "red"), 
      cell_text(color = "white")), 
        locations = list(
      cells_body(columns =`2020`, 
                 rows= `2020`<=0 ), 
      cells_body(columns =`2021`, 
                 rows= `2021`<=0 ), 
       cells_body(columns =`2022`, 
                 rows= `2022`<=0 ), 
       cells_body(columns =`2022`, 
                 rows= `2022`<= 0 ), 
       cells_body(columns =`2023`, 
                 rows= `2023`<=0 ), 
      cells_body(columns =`2024`, 
                 rows= `2024`<=0 )
    )
  )
```

## Risk (SD) all companies

```{r}
#| label: tbl-risk-all-companies
#| tbl-cap: "Risk (SD) all companies in the period"
mean_and_sd |> 
  select(-average_return) |> 
  pivot_wider(names_from = year,values_from = sd_return) |> 
  gt() |> 
  tab_header(
    title= "Average Yearly SDs of Tech companies",
    subtitle  = str_glue("From {start_date |> format('%d %b, %Y')} to {Sys.Date() |> format('%d %b, %Y')}")) |> 
  fmt_number(columns = -symbol, decimals  = 4) |> 
  tab_style(
    style = list(
      cell_fill(color = "red"), 
      cell_text(color = "white")), 
        locations = list(
      cells_body(columns =`2020`, 
                 rows= `2020`>=0.020), 
      cells_body(columns =`2021`, 
                 rows= `2021`>=0.020 ), 
       cells_body(columns =`2022`, 
                 rows= `2022`>=0.020  ), 
       cells_body(columns =`2022`, 
                 rows= `2022`>=0.020  ), 
       cells_body(columns =`2023`, 
                 rows= `2023`>=0.020  ), 
      cells_body(columns =`2024`, 
                 rows= `2024`>=0.020)
    )
  )
```
